---
apiVersion: v1
kind: Namespace
metadata:
  name: crossplane-system
  labels:
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/managed-by: argocd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: crossplane
  namespace: crossplane-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane
  labels:
    app.kubernetes.io/name: crossplane
rules:
- apiGroups:
  - ""
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "apps"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "pkg.crossplane.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "apiextensions.crossplane.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "ops.crossplane.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "protection.crossplane.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - "*"
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crossplane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crossplane
subjects:
- kind: ServiceAccount
  name: crossplane
  namespace: crossplane-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crossplane
  namespace: crossplane-system
  labels:
    app: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/managed-by: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crossplane
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: crossplane
        release: crossplane
    spec:
      serviceAccountName: crossplane
      containers:
      - name: crossplane
        image: crossplane/crossplane:v1.14.5
        imagePullPolicy: IfNotPresent
        args:
        - core
        - start
        - --tls-server-certs-dir=/tls/server
        - --tls-client-certs-dir=/tls/client
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LEADER_ELECTION
          value: "true"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        ports:
        - name: webhooks
          containerPort: 9443
        - name: metrics
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2000
        volumeMounts:
        - name: tls-server-certs
          mountPath: /tls/server
        - name: tls-client-certs
          mountPath: /tls/client
      volumes:
      - name: tls-server-certs
        secret:
          secretName: crossplane-tls-server
          optional: true
      - name: tls-client-certs
        secret:
          secretName: crossplane-tls-client
          optional: true

